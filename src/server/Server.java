/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * My Own Comments
 * Size = [622, 400]
*/
//package server;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;

/**
 *
 * @author vaibhav3301
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        start = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        stop = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("Port");

        start.setText("Start Server!");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        log.setEditable(false);
        log.setColumns(20);
        log.setRows(5);
        jScrollPane2.setViewportView(log);

        stop.setText("Stop Server");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(port)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(start, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                    .addComponent(stop))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void startActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int p = Integer.parseInt(port.getText());
        try {
        mainSocket = new java.net.ServerSocket(p);
        }
        catch (java.io.IOException e) {
            log.append("SERVERERR: "+e+"\n");
        }
        if (p == 0)     log.append("Port Selected: "+ mainSocket.getLocalPort()+"\n");

        new Connections(mainSocket).start();
        log.append("Server Started on port: "+ mainSocket.getLocalPort()+"\n");


    }

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        stopServer = 1;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
          javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());

            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // My Variables
    private java.net.ServerSocket mainSocket;
    private java.net.Socket clients[] = new java.net.Socket[15];
    private java.io.PrintStream outs[] = new java.io.PrintStream[15];
    public static int nodeid = 0,stopServer = 0;

    // Variables declaration - do not modify
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea log;
    private javax.swing.JTextField port;
    private javax.swing.JButton start;
    private javax.swing.JButton stop;
    // End of variables declaration

    class Connections extends Thread {

        java.net.ServerSocket localServer;
        java.net.Socket tmpClient;

        public Connections(java.net.ServerSocket tmp) {
            localServer = tmp;
        }

        public void run() {
            try {
            while (true) {
            if (stopServer == 1) break;


            tmpClient = localServer.accept();
            //  Using shared resource.
            clients[nodeid] = tmpClient;
            outs[nodeid] = new PrintStream(tmpClient.getOutputStream());
            nodeid++;
            //----------------------------
            log.append("Client "+nodeid+" Connected\n");
            new Running(tmpClient).start();
            }
            }
            catch (java.io.IOException e) {

                log.append("CONNECTIONTHREADERR: "+e+"\n");
            }

        }
    }

    class Running extends Thread {
		Socket s;
                BufferedReader input;
                PrintStream output;
                String str;

		public Running(Socket s) {
                    this.s = s;
                    try {
                    log.append("Client "+nodeid+" Running\n");
                    input = new BufferedReader(new InputStreamReader (s.getInputStream()));
                    output = new PrintStream(s.getOutputStream());

                    }catch (java.io.IOException e) {
                        log.append("RUNNINGTHREADERR: "+e+"\n");
                    }
		}


                public void sendMessagetoAll(String s) {

                    String sentText = s;

                    for (int i = 0;i<nodeid; i++)
                           if (sentText != null)
                        outs[i].println(sentText);


                }

                public void sendUsers() {
                    log.append("Running Users");
                    for (int i = 0;i<nodeid;i++)
                            output.println(clients[i].toString());
                    }

		public void run() {
                        try {
			while (true) {
			 //if (stopServer == 1) break;

                        str = input.readLine();
                        if (str == null)    break;
                        if (str == "!getList")
                            //  Send the list of connected Clients to USER
                            sendUsers();
                        sendMessagetoAll(str);

                        log.append(str+"\n");
                        }
                        }
			catch (java.io.IOException e) {
                            //error.setText("READINGERR");
                            log.append("MAINTHREADERR: "+e+"\n");
                        }


		}
            }

}
